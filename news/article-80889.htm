<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freeclashmeta.github.io/news/article-80889.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>JAVA常用API整理</title>
        <meta name="description" content="欢迎转载，转载请注明出处：https://blog.csdn.net/u013547284/article/details/71158100 一、JAVA常用API java.lang.Math 提供" />
        <link rel="icon" href="/assets/website/img/freeclashmeta/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Clash Meta免费节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freeclashmeta.github.io/news/article-80889.htm" />
    <meta property="og:site_name" content="Free Clash Meta免费节点分享站" />
    <meta property="og:title" content="JAVA常用API整理" />
    <meta property="og:image" content="https://freeclashmeta.github.io/uploads/20240729-1/9706536d3a65228c17cc4d1b50b24dda.webp" />
        <meta property="og:release_date" content="2025-03-25T08:17:06" />
    <meta property="og:updated_time" content="2025-03-25T08:17:06" />
        <meta property="og:description" content="欢迎转载，转载请注明出处：https://blog.csdn.net/u013547284/article/details/71158100 一、JAVA常用API java.lang.Math 提供" />
        
    <!-- web fonts -->
    <link href="//fonts.googleapis.com/css?family=Roboto:300,400,500,700,900&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css?family=Nunito:200,300,400,600,700,800,900&display=swap" rel="stylesheet">
    <!-- //web fonts -->
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/freeclashmeta/style-starter.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="JAVA常用API整理">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XC0F2XP2Y3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XC0F2XP2Y3');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="w3l-bootstrap-header fixed-top">
    <nav class="navbar navbar-expand-lg navbar-light p-2">
        <div class="container">
                        <a class="navbar-brand" href="/">Free Clash Meta</a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div>
        </div>
    </nav>
</div>
    <!-- index-block1 -->
    <div class="w3l-index-block1 list">
        <div class="content py-5">
            <div class="container">
                <div class="row py-md-5 py-3">
                    <div class="col-md-5 content-left">
                        <h1 class="pt-5">JAVA常用API整理</h1>
                        <p class="mt-3 mb-md-5 mb-4">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                    <div class="col-md-7 content-photo mt-md-0 mt-5">
                        <img src="/assets/website/img/freeclashmeta/main.jpg" class="img-fluid" alt="main image">
                    </div>
                </div>
                <div class="clear"></div>
            </div>
        </div>
    </div>
    <!-- //index-block1 -->
    <!-- content-with-photo17 -->
    <section class="w3l-index-block3">
        <div class="section-info py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p><strong>欢迎转载，转载请注明出处：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/u013547284/article/details/71158100"  rel="nofollow">https://blog.csdn.net/u013547284/article/details/71158100</a></strong></p> <p><strong>一、JAVA常用API</strong></p> <p><strong>java.lang.Math</strong></p> <p>提供sin, cos, tan, exp, log, log10 等类方法，PI和E等类字段</p> <p><strong>java.lang.String（StringBuilder线程不安全，StringBuffer线程安全）</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>char charAt(int index)</td> <td>返回给定位置的代码单元</td> </tr> <tr> <td>boolean equals(Object other)<br /> boolean equalsIngoreCase(String other)</td> <td>如果字符串与other相等，返回true<br /> 忽略大小写</td> </tr> <tr> <td>int length()</td> <td>返回字符串的长度</td> </tr> <tr> <td>String substring(int beginIndex)<br /> String substring(int beginIndex, int endIndex)</td> <td>返回一个新字符串，包含原始字符串从beginIndex到串尾或到endIndex-1的所有代码单元</td> </tr> <tr> <td>String toLowerCase()<br /> String toUpperCase()</td> <td>返回小写字符串<br /> 返回大写字符串</td> </tr> <tr> <td>int indexOf(String str[, int fromIndex])<br /> int lastIndexOF(String str[, int fromIndex])</td> <td>返回第一个/最后一个子串的位置,从起始位置或者fromIndex开始</td> </tr> </tbody> </table> <p><strong>java.util.Scanner</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>Scanner(InputStream in)<br /> Scanner(File f)<br /> Scanner(String data)</td> <td>用给定的输入流创建一个Scanner对象<br /> 例子：Scanner in = new Scanner(System.in)</td> </tr> <tr> <td>String nextLine()</td> <td>读取输入的下一行内容</td> </tr> <tr> <td>String next()</td> <td>读取输入的下一个单词（以空格作为间隔）</td> </tr> <tr> <td>int nextInt()<br /> double nextDouble()</td> <td>读取并转换下一个表示整数或浮点数的字符序列</td> </tr> </tbody> </table> <p><strong>for each循环</strong><br /> for(variable : collection) statement</p> <p>collection这一集合表达式必须是一个数组或者是一个实现了Iterable接口的类对象</p> <p><strong>java.util.Arrays</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>static String toString(type[] a)</td> <td>返回包含a中数据元素的字符串</td> </tr> <tr> <td>static void sort(type[] a)</td> <td>采用优化的快速排序算法对数组进行排序</td> </tr> <tr> <td>static void binarySearch(type[] a, type v)</td> <td>使用二分搜索算法查找值v</td> </tr> <tr> <td>static Boolean equals(type[] a, type[] b)</td> <td>如果两个数字相同，返回true</td> </tr> </tbody> </table> <p>数组名.length</p> <p>数组长度</p> <p><strong>java.util.Radom</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>Random()</td> <td>构建一个新的随机数生成器</td> </tr> <tr> <td>int nextInt(int n)</td> <td>返回一个 0 ~ n-1之间的随机数</td> </tr> </tbody> </table> <p><strong>java.lang.Object</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>String toString()</td> <td>返回描述该对象值的字符串。在自定义类中应覆盖这个方法</td> </tr> <tr> <td>boolean equals(Object otherObject)</td> <td>比较两个对象是否相等。在自定义类中应覆盖这个方法</td> </tr> <tr> <td>Class getClass()<br /> int hashCode()</td> <td>返回包含对象信息的类对象<br /> 返回对象的散列码</td> </tr> <tr> <td>static wait()<br /> static notify()<br /> static notifyAll()</td> <td>&nbsp;</td> </tr> </tbody> </table> <p><strong>java.lang.Class</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>String getName()</td> <td>返回这个类的名字</td> </tr> <tr> <td>static Class forName(String className)</td> <td>返回描述类名为className的Class对象</td> </tr> <tr> <td>Object newInstance()</td> <td>返回这个类的一个新实例</td> </tr> <tr> <td>Field[] getFields()<br /> Field[] getDeclareFields()</td> <td>getFields()返回一个包含Field对象的数组，这些对象记录了这个类或其超类的公有域<br /> getDeclareFields()返回的Field对象记录了这个类的全部域</td> </tr> <tr> <td>Method[] getMethods()<br /> Method[] getDeclareMethods()</td> <td>getMethods()返回一个包含Method对象的数组，这些对象记录了这个类或其超类的公用方法<br /> getDeclareMethods()返回的Field对象记录了这个类的全部方法</td> </tr> <tr> <td>Constructor[] getConstructors()<br /> Constructor[] getDeclareConstructors()</td> <td>getConstructors()返回一个包含Constructor对象的数组，这些对象记录了这个类的公有构造器<br /> getDeclareConstructors()返回的Constructor对象记录了这个类的全部构造器</td> </tr> </tbody> </table> <p><strong>断言</strong></p> <p>assert 条件;</p> <p>assert 条件:表达式;</p> <p><strong>二、JAVA集合框架</strong></p> <p>Java集合类库将接口和实现分离。当程序使用集合时，一旦构建了集合就不需要知道究竟使用了哪种实现。因此，只有在构建集合对象时，使用具体的类才有意义。可以<span style="color:#ff0000;"><strong>使用接口类型存放集合的引用</strong></span>。利用这种方法，一旦改变想法，可以轻松使用另外一种不同的实现，只需在对象创建处修改即可。</p> <p><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230217/5ac849eff28207ce358bcfa6491fb86a.jpg"></p> <p><strong>java.util.Collection&lt;E&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>Iterator&lt;E&gt; iterator()</td> <td>返回一个用于访问集合中每个元素的迭代器</td> </tr> <tr> <td>int size()</td> <td>返回当前存储在集合中的元素个数</td> </tr> <tr> <td>boolean isEmpty()</td> <td>如果集合中没有元素，返回true</td> </tr> <tr> <td>boolean contains(Object obj)<br /> boolean containAll(Collection&lt;? extend E&gt; other)</td> <td>如果集合中包含相等对象，返回true</td> </tr> <tr> <td>boolean add(Object element)<br /> boolean addAll(Collection&lt;? extend E&gt; other)</td> <td>将一个元素添加到集合中，集合改变返回true</td> </tr> <tr> <td>boolean remove(Object element)<br /> boolean removeAll(Collection&lt;?&gt; other)</td> <td>删除相等元素，成功删除返回true</td> </tr> </tbody> </table> <p><strong>java.util.Iterator&lt;E&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>boolean hasNext()</td> <td>如果存在可访问的元素，返回true</td> </tr> <tr> <td>E next()</td> <td>返回将要访问的下一个对象</td> </tr> <tr> <td>void remove()</td> <td>删除上次访问的元素</td> </tr> </tbody> </table> <p><strong>Java库中具体集合</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>ArrayList</td> <td>一种可以动态增长和缩减的索引序列</td> </tr> <tr> <td>LinkedList</td> <td>一种可以在任何位置进行高效插入和删除操作的有序序列</td> </tr> <tr> <td>ArrayDeque</td> <td>一种用循环数组实现的双端队列</td> </tr> <tr> <td>HashSet</td> <td>一种没有重复元素的无序集合</td> </tr> <tr> <td>TreeSet</td> <td>一种有序集</td> </tr> <tr> <td>EnumSet</td> <td>一种包含枚举类型值的集合</td> </tr> <tr> <td>LinkedHashSet</td> <td>一种可以记住元素插入次序的集</td> </tr> <tr> <td>PriorityQueue</td> <td>一种允许高效删除最小元素的集合</td> </tr> <tr> <td>HashMap</td> <td>一种存储键/值关联的数据结构</td> </tr> <tr> <td>TreeMap</td> <td>一种键值有序排列的映射表</td> </tr> <tr> <td>EnumMap</td> <td>一种键值属于枚举类型的映射表</td> </tr> <tr> <td>LinkedHashMap</td> <td>一种可以记住键/值项添加次序的映射表</td> </tr> <tr> <td>WeakHashMap</td> <td>一种其值无用武之地后可以被垃圾回收期回收的映射表</td> </tr> <tr> <td>IdentityHashMap</td> <td>一种用==而不是用equals比较键值的映射表</td> </tr> </tbody> </table> <p><strong>1、List</strong></p> <p>List接口扩展自Collection，它可以定义一个<span style="color:#ff0000;">允许重复的有序集合</span>，从List接口中的方法来看，List接口主要是增加了面向位置的操作，允许在指定位置上操作元素，同时增加了一个能够双向遍历线性表的新列表迭代器ListIterator。List接口有动态数组（ArrayList类）和双端链表（LinkedList类）两种实现方式。</p> <p><strong>java.util.List&lt;E&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>ListIterator&lt;E&gt; listIterator()<br /> ListIterator&lt;E&gt; listIterator(int index)</td> <td>返回一个列表迭代器<br /> 迭代器第一次调用next返回给定位置元素</td> </tr> <tr> <td>void add(int i, E element)<br /> void addAll(int i, Colletion&lt;? extend E&gt; elements)</td> <td>向集合指定位置添加元素</td> </tr> <tr> <td>E remove(int i)</td> <td>删除给定位置元素并返回</td> </tr> <tr> <td>E get(int i)</td> <td>获得给定位置元素并返回</td> </tr> <tr> <td>E set(int i, E element)</td> <td>设置给定位置元素并返回原来的元素</td> </tr> <tr> <td>int indexOf(Object element)<br /> int lastIndexOf(Object element)</td> <td>返回与指定元素相等元素在列表中第一次出现的位置<br /> 返回与指定元素相等元素在列表中最后一次出现的位置</td> </tr> </tbody> </table> <p><strong>java.util.ListIterator&lt;E&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>void add(E Element)</td> <td>在当前位置添加一个元素</td> </tr> <tr> <td>void set(E Element)</td> <td>用新元素代替next或previous上次访问的元素</td> </tr> <tr> <td>boolean havaPrevious()</td> <td>反向迭代列表时是否还有可供访问的值</td> </tr> <tr> <td>E previous()</td> <td>返回前一个对象</td> </tr> <tr> <td>int nextIndex()</td> <td>返回下一次调用next时返回的元素索引</td> </tr> <tr> <td>int previousIndex()</td> <td>返回下一次调用previous时返回的元素索引</td> </tr> </tbody> </table> <p><strong>java.util.ArrayList&lt;E&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>ArrayList&lt;E&gt;()</td> <td>构造一个空数组列表</td> </tr> <tr> <td>boolean add(E obj)</td> <td>在数组列表尾端添加一个元素，永远返回true</td> </tr> <tr> <td>int size()</td> <td>返回存储在数组中的<span style="color:#ff0000;">当前元素数量</span> </td> </tr> <tr> <td>void set(int index, E obj)</td> <td>设置数组列表指定位置的值</td> </tr> <tr> <td>E get(int index)</td> <td>获的指定位置的元素值</td> </tr> <tr> <td>void add(int index, E obj)</td> <td>向后移动元素，插入元素</td> </tr> <tr> <td>E remove(int index)</td> <td>删除一个元素，并将后面元素前移</td> </tr> </tbody> </table> <p><strong>java.util.LinkedList&lt;E&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>LinkedList()<br /> LinkedList(Colletion&lt;? extend E&gt; elements)</td> <td>构造一个链表</td> </tr> <tr> <td>void addFirst(E element)<br /> void addLast(E element)</td> <td>添加元素到表头或表尾</td> </tr> <tr> <td>E getFirst()<br /> E getLast()</td> <td>返回表头或表尾的元素</td> </tr> <tr> <td>E removeFirst()<br /> E removeLast()</td> <td>删除表头或表尾的元素并返回</td> </tr> </tbody> </table> <p><strong>2、Set</strong></p> <p>Set接口扩展自Collection，它与List的不同之处在于，规定Set的实例不包含重复的元素。在一个规则集内，一定不存在两个相等的元素。AbstractSet是一个实现Set接口的抽象类，Set接口有三个具体实现类，分别是散列集HashSet、链式散列集LinkedHashSet和树形集TreeSet。</p> <p><strong><strong><strong>java.util.</strong>HashSet&lt;E&gt;</strong></strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>HashSet()<br /> HashSet(Colletion&lt;? extend E&gt; elements)<br /> HashSet(int initialCapacity)</td> <td>构造散列表</td> </tr> </tbody> </table> <p><strong>java.util.Linked</strong><strong>HashSet&lt;E&gt;</strong></p> <p>LinkedHashSet是用一个链表实现来扩展HashSet类，它支持对规则集内的元素<span style="color:#ff0000;">排序</span>。HashSet中的元素是没有被排序的，而LinkedHashSet中的元素可以按照它们插入规则集的顺序提取。</p> <p><strong>java.util.Tree</strong><strong>Set&lt;E&gt;</strong><br /> TreeSet扩展自AbstractSet，并实现了<span style="color:#ff0000;">NavigableSet</span>，AbstractSet扩展自AbstractCollection，树形集是一个有序的Set，其底层是一颗树,用红黑树实现，这样就能从Set里面提取一个有序序列了。在实例化TreeSet时，我们可以给TreeSet指定一个比较器Comparator来指定树形集中的元素<span style="color:#ff0000;">顺序</span>。树形集中提供了很多便捷的方法。</p> <p><strong>3、队列</strong></p> <p><strong>java.util.Queue&lt;E&gt;(接口)</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>boolean add(E element)<br /> boolean offer(E element)</td> <td>如果队列没有满，将元素添加到队列尾部</td> </tr> <tr> <td>E remove()<br /> E poll()</td> <td>如果队列不为空，删除并返回这个队列头部元素</td> </tr> <tr> <td>E element()<br /> E peek()</td> <td>如果队列不为空，返回这个队列头部元素</td> </tr> </tbody> </table> <p><strong>java.util.Deque&lt;E&gt;</strong></p> <p>接口Deque，是一个扩展自Queue的双端队列，它支持在两端插入和删除元素，Deque接口由ArrayDeque和LinkedList这两个类实现，<span style="color:#404040;">所以通常我们可以使用LinkedList来创建一个队列。PriorityQueue类实现了一个优先队列，优先队列中元素被赋予优先级，拥有高优先级的先被删除。</span></p> <p><strong>java.util.ProrityQueue&lt;E&gt;</strong></p> <p>优先级队列中的元素可以按任意顺序插入，却总是按照排序的顺序进行检索。优先级队列由堆实现。堆是一个可以自我调整的二叉树，对树执行添加和删除操作，可以让最小元素移动到根（最小堆），而不必花费时间对元素进行排序</p> <p><strong>4、Map接口</strong></p> <p>Map，图，是一种存储键值对映射的容器类，在Map中键可以是任意类型的对象，但不能有重复的键，每个键都对应一个值，真正存储在图中的是键值构成的条目。</p> <p><strong>java.util.Map&lt;K,V&gt;</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>V get(Object key)</td> <td>获得与键对应的值</td> </tr> <tr> <td>V put(K key, V value)<br /> V putAll(Map&lt;? extends K, ? extends V&gt; entries)</td> <td>将键与对应的值关系插入到映射中</td> </tr> <tr> <td>boolean containKey(Object key)<br /> boolean containValue(Object value)</td> <td>查询</td> </tr> </tbody> </table> <p><strong>java.util.HashMap&lt;K,V&gt;</strong>HashMap是基于哈希表的Map接口的非同步实现，继承自AbstractMap，AbstractMap是部分实现Map接口的抽象类。在之前的版本中，HashMap采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当链表中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，HashMap采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。</p> <p><strong>java.util.LinkedHashMap&lt;K,V&gt;</strong></p> <p>LinkedHashMap继承自HashMap，它主要是用链表实现来扩展HashMap类，HashMap中条目是没有顺序的，但是在LinkedHashMap中元素既可以按照它们插入图的顺序排序，也可以按它们最后一次被访问的顺序排序。</p> <p><strong>java.util.TreeHashMap&lt;K,V&gt;</strong></p> <p>TreeMap基于红黑树数据结构的实现，键值可以使用Comparable或Comparator接口来排序。TreeMap继承自AbstractMap，同时实现了接口NavigableMap，而接口NavigableMap则继承自SortedMap。SortedMap是Map的子接口，使用它可以确保图中的条目是排好序的。在实际使用中，如果更新图时不需要保持图中元素的顺序，就使用HashMap，如果需要保持图中元素的插入顺序或者访问顺序，就使用LinkedHashMap，如果需要使图按照键值排序，就使用TreeMap。</p> <p><strong>5、其他集合类</strong></p> <p>下面主要介绍一下其它几个特殊的集合类，Vector、Stack、HashTable、ConcurrentHashMap以及CopyOnWriteArrayList。</p> <p><strong>java.util.Vector&lt;E&gt;</strong></p> <p>用法上，Vector与ArrayList基本一致，不同之处在于Vector使用了关键字synchronized将访问和修改向量的方法都变成同步的了，所以对于不需要同步的应用程序来说，类ArrayList比类Vector更高效。</p> <p><strong>java.util.Stack&lt;E&gt;</strong></p> <p>Stack，栈类，是Java2之前引入的，继承自类Vector。</p> <p><strong>java.util.HashTable</strong></p> <p>HashTable和前面介绍的HashMap很类似，它也是一个散列表，存储的内容是键值对映射，不同之处在于，HashTable是继承自Dictionary的，HashTable中的函数都是同步的，这意味着它也是线程安全的，另外，HashTable中key和value都不可以为null。</p> <p><strong>java.util.ConcurrentHashMap</strong></p> <p>ConcurrentHashMap是HashMap的线程安全版。同HashMap相比，ConcurrentHashMap不仅保证了访问的线程安全性，而且在效率上与HashTable相比，也有较大的提高。</p> <p><strong><strong>java.util.CopyOnWriteArrayList</strong></strong></p> <p>CopyOnWriteArrayList，是一个线程安全的List接口的实现，它使用了ReentrantLock锁来保证在并发情况下提供高性能的并发读取。</p> <p><strong>java.util.CopyOnWriteArraySet</strong></p> <p>CopyOnWriteArraySet，是一个线程安全的set接口的实现，它使用了ReentrantLock锁来保证在并发情况下提供高性能的并发读取。</p> <p style="margin-left:10px;">ConcurrentLinkedQuerue是一个先进先出的队列。它是非阻塞队列。</p> <p style="margin-left:10px;">ConcurrentSkipListMap可以在高效并发中替代SoredMap（例如用Collections.synchronzedMap包装的TreeMap）。</p> <p style="margin-left:10px;">ConcurrentSkipListSet可以在高效并发中替代SoredSet（例如用Collections.synchronzedSet包装的TreeMap）。</p> <p><strong>6、泛型集合算法</strong></p> <p><strong>6.1 &nbsp;排序</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>static &lt;T extends Comparable&lt;? super T&gt;&gt; void java.util.Collections.sort(List&lt;T&gt; elements,[new Comparator&lt;T&gt;(){ public int compare(T o1, T o2){return ...} &nbsp; } ])</td> <td>对列表元素排序</td> </tr> </tbody> </table> <p><strong>6.2 &nbsp;查找</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>static &lt;T extends Comparable&lt;? super T&gt;&gt; int java.util.Collections.binarySearch(List&lt;T&gt; elements, T key)</td> <td>二分查找key，返回对象索引</td> </tr> </tbody> </table> <p><strong>6.3 &nbsp;其他</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>static &lt;T&gt; java.util.Collections.min(Collection&lt;T&gt; elements, Comparator&lt;? super T&gt; c)<br /> static &lt;T&gt; java.util.Collections.max(Collection&lt;T&gt; elements, Comparator&lt;? super T&gt; c)</td> <td>查找最小值/最大值</td> </tr> </tbody> </table> <p><strong>三、并发部分API</strong></p> <p><strong>java.lang.Runnable</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>void run()</td> <td>必须覆盖这个方法</td> </tr> </tbody> </table> <p><strong>java.lang.Thread</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>Thread()<br /> Thread(Runnable target)</td> <td>构造器</td> </tr> <tr> <td>void start()</td> <td>启动线程</td> </tr> <tr> <td>void run()</td> <td>如果没有重写，调用关联Runnable的run方法</td> </tr> <tr> <td>void interupt()</td> <td>中断线程（中止阻塞状态，对运行线程无作用）</td> </tr> <tr> <td>void setPriority(int newPriority)</td> <td>设置优先级（1-10，默认5）</td> </tr> <tr> <td>static&nbsp;void yield()<br /> static void sleep(long millis)</td> <td>使当前线程处于让步状态（让步于同优先级或高优先级线程）<br /> 休眠</td> </tr> <tr> <td>void setDaemon()</td> <td>设置为守护线程</td> </tr> <tr> <td>Thread.State getState()</td> <td>获得线程当前状态</td> </tr> </tbody> </table> <p><strong>锁对象</strong></p> <pre class="has"><code class="language-java">ReentrantLock myLock = new ReentrantLock(); mylock.lock(); try{      critical section }finally{      mylock.unlock(); }</code></pre> <p><strong>条件对象</strong></p> <pre class="has"><code class="language-java">private ReetranLock mylock = new ReetranLock(); private Condition sufficientFunds = mylock.newCondition() public void transfer(int from, int amount) {     mylock.lock();     try{          while(account[from] &lt; amount){               sufficientFunds.await();           }           ...           sufficientFunds.singalAll();       }finally{           mylock.unlock();       } }</code></pre> <p><strong>synchronized关键字（内置锁）</strong><br /> 格式1：synchronized 方法</p> <p>格式2：synchronized（obj）{}</p> <p><strong>使用synchronized如何设置条件变量</strong></p> <table border="1" cellpadding="1" cellspacing="1"> <tbody> <tr> <td>void notifyAll()</td> <td>解除在对象上调用wait方法的线程的阻塞状态</td> </tr> <tr> <td>void wait()</td> <td>导致线程进入等待状态</td> </tr> </tbody> </table> <p><strong>volatile域</strong><br /> volatile只提供可见性（在线程工作内存中被修改后立即写入到主存中），不提供原子性。<br /> 使用final变量可以保证可见性：构造函数完成时即不变，未完成构造期间对其他线程不可见。<br /><strong>java.lang.ThreadLocal&lt;T&gt;</strong><br /> 作用：将内存共享变量变为线程拷贝变量<br /><strong>Executor类执行器</strong><br /> 1）调用Executors类（工厂类）中静态工厂方法newCacherThreadPool<br /> 2）调用submit提交Runnable或Callable对象<br /> 3）当不再提交任何任务时，调用shutdown<br /><img decoding="async" alt="" class="has" src="http://img.555519.xyz/uploads/20230217/cce3b6a48927b61051e79e728d163e30.jpg"></p> <p>&nbsp;</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-80169.htm">动物医院名字有创意两个字的（动物医院名片）</a></p>
                                        <p>下一个：<a href="/news/article-80890.htm">长期上门收购各种宠物犬株洲（株洲哪里有收狗的）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-5-free-node-subscribe-links.htm" title="「1月5日」最高速度21.1M/S，2025年Free Clash Meta每天更新免费节点订阅地址">「1月5日」最高速度21.1M/S，2025年Free Clash Meta每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-80169.htm" title="动物医院名字有创意两个字的（动物医院名片）">动物医院名字有创意两个字的（动物医院名片）</a></li>
                        <li class="py-2"><a href="/news/article-61375.htm" title="java使用单循环链表解决约瑟夫问题">java使用单循环链表解决约瑟夫问题</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-12-free-subscribe-node.htm" title="「3月12日」最高速度20.3M/S，2025年Free Clash Meta每天更新免费节点订阅地址">「3月12日」最高速度20.3M/S，2025年Free Clash Meta每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-79494.htm" title="动物疫苗在哪里打的好呢 动物疫苗在哪里打的好呢知乎">动物疫苗在哪里打的好呢 动物疫苗在哪里打的好呢知乎</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-free-subscribe-node.htm" title="「1月19日」最高速度21.8M/S，2025年Free Clash Meta每天更新免费节点订阅地址">「1月19日」最高速度21.8M/S，2025年Free Clash Meta每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-23-free-node-subscribe-links.htm" title="「1月23日」最高速度20.1M/S，2025年Free Clash Meta每天更新免费节点订阅地址">「1月23日」最高速度20.1M/S，2025年Free Clash Meta每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-53461.htm" title="动物接种疫苗多少钱一针啊视频讲解图片（动物疫苗接种方法及注意事项）">动物接种疫苗多少钱一针啊视频讲解图片（动物疫苗接种方法及注意事项）</a></li>
                        <li class="py-2"><a href="/news/article-43333.htm" title="SpringCloud基础（四）Spring Cloud Config：配置中心">SpringCloud基础（四）Spring Cloud Config：配置中心</a></li>
                        <li class="py-2"><a href="/news/article-69432.htm" title="猫咪三针疫苗大概多少钱啊（猫三针疫苗多少钱一只）">猫咪三针疫苗大概多少钱啊（猫三针疫苗多少钱一只）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">75</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <section class="w3l-market-footer">
        <footer class="footer-28">
            <div class="footer-bg-layer">
                <div class="midd-footer-28 align-center py-lg-4 py-3 mt-5">
                    <div class="container">
                        <p class="copy-footer-28 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            Free Clash Meta免费节点分享站 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </footer>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            &#10548;
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //footer-28 block -->
    <!-- jQuery, Bootstrap JS -->
    <script src="/assets/website/js/frontend/freeclashmeta/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashmeta/bootstrap.min.js"></script>
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/freeclashmeta/owl.carousel.js"></script>
    <!-- script for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: true,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: true
                },
                1000: {
                    items: 1,
                    nav: true
                }
            }
        })
    })
    </script>
    <!-- //script for owlcarousel -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script src="/assets/website/js/frontend/freeclashmeta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>