<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freeclashmeta.github.io/news/article-42841.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>.NET性能优化-你应该为集合类型设置初始大小</title>
        <meta name="description" content="前言 计划开一个新的系列，来讲一讲在工作中经常用到的性能优化手段、思路和如何发现性能瓶颈，后续有时间的话应该会整理一系列的博文出来。 今天要谈的一个性能优化的Tips是一个老生常谈的点，但是也是很多人" />
        <link rel="icon" href="/assets/website/img/freeclashmeta/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Clash Meta免费节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freeclashmeta.github.io/news/article-42841.htm" />
    <meta property="og:site_name" content="Free Clash Meta免费节点分享站" />
    <meta property="og:title" content=".NET性能优化-你应该为集合类型设置初始大小" />
    <meta property="og:image" content="https://freeclashmeta.github.io/uploads/20240729-1/5433a9b056cd0dae5ca9aedc7137ee86.webp" />
        <meta property="og:release_date" content="2025-01-19T07:09:30" />
    <meta property="og:updated_time" content="2025-01-19T07:09:30" />
        <meta property="og:description" content="前言 计划开一个新的系列，来讲一讲在工作中经常用到的性能优化手段、思路和如何发现性能瓶颈，后续有时间的话应该会整理一系列的博文出来。 今天要谈的一个性能优化的Tips是一个老生常谈的点，但是也是很多人" />
        
    <!-- web fonts -->
    <link href="//fonts.googleapis.com/css?family=Roboto:300,400,500,700,900&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css?family=Nunito:200,300,400,600,700,800,900&display=swap" rel="stylesheet">
    <!-- //web fonts -->
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/freeclashmeta/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XC0F2XP2Y3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XC0F2XP2Y3');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="w3l-bootstrap-header fixed-top">
    <nav class="navbar navbar-expand-lg navbar-light p-2">
        <div class="container">
                        <a class="navbar-brand" href="/">Free Clash Meta</a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</div>
    <!-- index-block1 -->
    <div class="w3l-index-block1 list">
        <div class="content py-5">
            <div class="container">
                <div class="row py-md-5 py-3">
                    <div class="col-md-5 content-left">
                        <h1 class="pt-5">.NET性能优化-你应该为集合类型设置初始大小</h1>
                        <p class="mt-3 mb-md-5 mb-4">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                    <div class="col-md-7 content-photo mt-md-0 mt-5">
                        <img href="/assets/website/img/freeclashmeta/main.jpg" class="img-fluid" alt="main image">
                    </div>
                </div>
                <div class="clear"></div>
            </div>
        </div>
    </div>
    <!-- //index-block1 -->
    <!-- content-with-photo17 -->
    <section class="w3l-index-block3">
        <div class="section-info py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="前言">前言</h2> <p>计划开一个新的系列，来讲一讲在工作中经常用到的性能优化手段、思路和如何发现性能瓶颈，后续有时间的话应该会整理一系列的博文出来。<br /> 今天要谈的一个性能优化的Tips是一个老生常谈的点，但是也是很多人没有注意的一个点。在<strong>使用集合类型是，你应该设置一个预估的初始大小</strong>，那么为什么需要这样做？我们一起来从源码的角度说一说。</p> <h2 id="集合类型">集合类型</h2> <p>我们先来聊一聊.NET BCL库中提供的集合类型，对于这个大家肯定都不陌生，比如<code>List</code>、<code>HashSet</code>、<code>Dictionary</code>、<code>Queue</code>、<code>Stack</code>等等，这些都是大家每天都用到，非常熟悉的类型了，那么大家在使用的时候有没有注意过它们有一个特殊构造函数呢？像下面代码块中的那样。</p> <pre><code class="language-C#">public Stack (int capacity)  public List (int capacity) public Queue (int capacity) public HashSet (int capacity) public Dictionary (int capacity)</code></pre> <p>哎？为什么这些构造函数都有一个叫<code>capacity</code>的参数呢？我们来看看这个参数的注释。<strong>初始化类的新实例，该实例为空并且具有指定的初始容量或默认初始容量</strong>。<br /> 这就很奇怪了不是吗？在我们印象里面只有数组之类的才需要指定固定的长度，为什么这些可以无限添加元素的集合类型也要设置初始容量呢？这其实和这些集合类型的实现方式有关，废话不多说，我们直接看源码。</p> <h3 id="list源码">List源码</h3> <p>首先来看比较简单的List的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs"  target="_blank" rel="nofollow">源码</a>（源码地址在文中都做了超链接，可以直接点击过去，在文末也会附上链接地址）。下面是List的私有变量。</p> <pre><code class="language-C#">// 用于存在实际的数据，添加进List的元素都由存储在_items数组中 internal T[] _items;  // 当前已经存储了多少元素 internal int _size;  // 当前的版本号，List每发生一次元素的变更，版本号都会+1 private int _version;</code></pre> <p>从上面的源码中，我们可以看到虽然List是动态集合，可以无限的往里面添加元素，但是它底层存储数据的还是使用的<strong>数组</strong>，那么既然使用的数组那它是怎么实现能无限的往里面添加元素的？我们来看看<code>Add</code>方法。</p> <pre><code class="language-C#">[MethodImpl(MethodImplOptions.AggressiveInlining)] public void Add(T item) {     // 版本号+1     _version++;     T[] array = _items;     int size = _size;     // 如果当前已经使用的空间 小于数组大小那么直接存储 size+1     if ((uint)size &lt; (uint)array.Length)     {         _size = size + 1;         array[size] = item;     }     else     {         // 注意！！ 如果已经使用的空间等于数组大小，那么走AddWithResize方法         AddWithResize(item);     } }</code></pre> <p>从上面的源码可以看到，如果内部<code>_item</code>数组有足够的空间，那么元素直接往里面加就好了，但是如果内部已存放的元素<code>_size</code>等于<code>_item</code>数组大小时，会调用<code>AddWithResize</code>方法，我们来看看里面做了啥。</p> <pre><code class="language-C#">// AddWithResize方法 [MethodImpl(MethodImplOptions.NoInlining)] private void AddWithResize(T item) {     Debug.Assert(_size == _items.Length);     int size = _size;     // 调用Grow方法，并且把size+1，至少需要size+1的空间才能完成Add操作     Grow(size + 1);     _size = size + 1;     _items[size] = item; }  // Grow方法 private void Grow(int capacity) {     Debug.Assert(_items.Length &lt; capacity);     // 如果内部数组长度等于0，那么赋值为DefaultCapacity(大小为4)，否则就赋值两倍当前长度     int newcapacity = _items.Length == 0 ? DefaultCapacity : 2 * _items.Length;     // 这里做了一个判断，如果newcapacity大于Array.MaxLength(大小是2^31元素)     // 也就是说一个List最大能存储2^32元素     if ((uint)newcapacity &gt; Array.MaxLength) newcapacity = Array.MaxLength;     // 如果newpapacity小于预算需要的容量，也就是说元素数量大于Array.MaxLength     // 后面Capacity会抛出异常     if (newcapacity &lt; capacity) newcapacity = capacity;     // 为Capacity属性设置值     Capacity = newcapacity; }  // Capacity属性 public int Capacity {     // 获取容量，直接返回_items的容量     get =&gt; _items.Length;     set     {         // 如果value值还小于当前元素个数         // 直接抛异常         if (value &lt; _size)         {             ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.value, ExceptionResource.ArgumentOutOfRange_SmallCapacity);         }          // 如果value值和当前数组长度不匹配         // 那么走扩容逻辑         if (value != _items.Length)         {             // value大于0新建一个新的数组             // 将原来的数组元素拷贝过去             if (value &gt; 0)             {                 T[] newItems = new T[value];                 if (_size &gt; 0)                 {                     Array.Copy(_items, newItems, _size);                 }                 _items = newItems;             }             // value小于0 那么直接把_items赋值为空数组             // 原本的数组可以被gc回收了             else             {                 _items = s_emptyArray;             }         }     }</code></pre> <p>通过上面的代码我们可以得到两个有意思的结论。</p> <blockquote> <ol> <li>一个List元素最大能存放2^31个元素.</li> <li>不设置Capacity的话，默认初始大小为4，后面会以2倍的空间扩容。</li> </ol> </blockquote> <p><code>List</code>底层是通过数组来存放元素的，如果空间不够会按照2倍大小来扩容，但是它并不能无限制的存放数据。<br /><strong>在元素低于4个的情况下，不设置Capacity不会有任何影响；如果大于4个，那么就会走扩容流程，不仅需要申请新的数组，而且还要发生内存复制和需要GC回收原来的数组。</strong><br /> 大家必须知道<strong>分配内存、内存复制和GC回收</strong>内存的代价是巨大的，下面有个示意图，举了一个从4扩容到8的例子。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/51d1e166e4e2d9da1173e6f7a6754f35.jpg" alt=".NET性能优化-你应该为集合类型设置初始大小"></p> <p>上面列举了我们从源码中看到的情况，那么不设置初始化的容量，对性能影响到底有多大呢？所以构建了一个Benchmark，来看看在不同量级下的影响，下面的Benchmark主要是探究两个问题。</p> <ul> <li>设置初始值容量和不设置有多大的差别</li> <li>要多少设置多少比较好，还是可以随意设置一些值</li> </ul> <pre><code class="language-C#">public class ListCapacityBench {     // 宇宙的真理 42     private static readonly Random OriginRandom = new(42);      // 整一个数列模拟常见的集合大小 最大12万     private static readonly int[] Arrays =     {         3, 5, 8, 13, 21, 34, 55, 89, 100, 120, 144, 180, 200, 233,          250, 377, 500, 550, 610, 987, 1000, 1500, 1597, 2000, 2584,         4181, 5000, 6765, 10946, 17711, 28657, 46368, 75025, 121393     };      // 生成一些随机数     private static readonly int[] OriginArrays = Enumerable.Range(0, Arrays.Max()).Select(c =&gt; OriginRandom.Next()).ToArray();             // 不设置容量     [Benchmark(Baseline = true)]     public int WithoutCapacity()     {         return InnerTest(null);     }      // 刚好设置需要的容量     [Benchmark]     public int SetArrayLengthCapacity()     {         return InnerTest(null, true);     }      // 设置为8     [Benchmark]     public int Set8Capacity()     {         return InnerTest(8);     }          // 设置为16     [Benchmark]     public int Set16Capacity()     {         return InnerTest(16);     }      // 设置为32     [Benchmark]     public int Set32Capacity()     {         return InnerTest(32);     }               // 设置为64     [Benchmark]     public int Set64Capacity()     {         return InnerTest(64);     }          // 实际的测试方法     // 不使用JIT优化，模拟集合的实际使用场景     [MethodImpl(MethodImplOptions.NoOptimization)]     private static int InnerTest(int? capacity, bool setLength = false)     {         var list = new List&lt;int&gt;();         foreach (var length in Arrays)         {             List&lt;int&gt; innerList;             if (capacity == null)             {                 innerList = setLength ? new List&lt;int&gt;(length) : new List&lt;int&gt;();             }             else             {                 innerList = new List&lt;int&gt;(capacity.Value);             }                          // 真正的测试方法  简单的填充数据             foreach (var item in OriginArrays.AsSpan()[..length])             {                 innerList.Add(item);             }                          list.Add(innerList.Count);         }          return list.Count;     }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/de7ff4b665875443e14ad3afaa2f32b7.jpg" alt=".NET性能优化-你应该为集合类型设置初始大小"><br /> 从上面的Benchmark结果可以看出来，<strong>设置刚好需要的初始容量最快(比不设置快40%)、GC次数最少(50%+)、分配的内存也最少(节约60%)</strong>，另外<strong>不建议不设置初始大小，它是最慢的</strong>。<br /> 要是实在不能预估大小，那么可以无脑设置一个8表现稍微好一点点。如果能预估大小，因为它是2倍扩容，可以在2的N次方中找一个接近的。</p> <blockquote> <p>8 16 32 64 128 512 1024 2048 4096 8192 ......</p> </blockquote> <h3 id="queuestack源码">Queue、Stack源码</h3> <p>接下来看看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Queue.cs"  target="_blank" rel="nofollow">Queue</a>和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Collections/src/System/Collections/Generic/Stack.cs"  target="_blank" rel="nofollow">Stack</a>，看看它的扩容逻辑是怎么样的。</p> <pre><code class="language-C#">private void Grow(int capacity) {     Debug.Assert(_array.Length &lt; capacity);     const int GrowFactor = 2;     const int MinimumGrow = 4;     int newcapacity = GrowFactor * _array.Length;      if ((uint)newcapacity &gt; Array.MaxLength) newcapacity = Array.MaxLength;      newcapacity = Math.Max(newcapacity, _array.Length + MinimumGrow);      if (newcapacity &lt; capacity) newcapacity = capacity;     SetCapacity(newcapacity); }</code></pre> <p>基本一样，也是2倍扩容，所以按照我们上面的规则就好了。</p> <h3 id="hashsetdictionary源码">HashSet、Dictionary源码</h3> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/HashSet.cs"  target="_blank" rel="nofollow">HashSet</a>和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Dictionary.cs"  target="_blank" rel="nofollow">Dictionary</a>的逻辑实现类似，只是一个Key就是Value，另外一个是Key对应Value。不过它们的扩容方式有所不同，具体可以看我之前的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/InCerry/p/10325290.html"  target="_blank" rel="nofollow">博客</a>，来看看扩容的源码，这里以<code>HashSet</code>为例。</p> <pre><code class="language-C#">private void Resize() =&gt; Resize(HashHelpers.ExpandPrime(_count), forceNewHashCodes: false); private void Resize(int newSize, bool forceNewHashCodes) {     // Value types never rehash     Debug.Assert(!forceNewHashCodes || !typeof(T).IsValueType);     Debug.Assert(_entries != null, "_entries should be non-null");     Debug.Assert(newSize &gt;= _entries.Length);     var entries = new Entry[newSize];     int count = _count;     Array.Copy(_entries, entries, count);     if (!typeof(T).IsValueType &amp;&amp; forceNewHashCodes)     {         Debug.Assert(_comparer is NonRandomizedStringEqualityComparer);         _comparer = (IEqualityComparer&lt;T&gt;)((NonRandomizedStringEqualityComparer)_comparer).GetRandomizedEqualityComparer();         for (int i = 0; i &lt; count; i++)         {             ref Entry entry = ref entries[i];             if (entry.Next &gt;= -1)             {                 entry.HashCode = entry.Value != null ? _comparer!.GetHashCode(entry.Value) : 0;             }         }         if (ReferenceEquals(_comparer, EqualityComparer&lt;T&gt;.Default))         {             _comparer = null;         }     }     // Assign member variables after both arrays allocated to guard against corruption from OOM if second fails     _buckets = new int[newSize]; #if TARGET_64BIT     _fastModMultiplier = HashHelpers.GetFastModMultiplier((uint)newSize); #endif    for (int i = 0; i &lt; count; i++)    {        ref Entry entry = ref entries[i];        if (entry.Next &gt;= -1)        {            ref int bucket = ref GetBucketRef(entry.HashCode);            entry.Next = bucket - 1; // Value in _buckets is 1-based            bucket = i + 1;        }    }    _entries = entries; }</code></pre> <p>从上面的源码中可以看到Resize的步骤如下所示。</p> <ol> <li>通过<code>HashHelpers.ExpandPrime</code>获取新的Size</li> <li>创建新的数组，使用数组拷贝将原数组元素拷贝过去</li> <li>对所有元素进行重新Hash，重建引用</li> </ol> <p>从这里大家就可以看出来，如果不指定初始大小的话，<code>HashSet</code>和<code>Dictionary</code>这样的数据结构<strong>扩容的成本更高</strong>，因为还需要ReHash这样的操作。<br /> 那么<code>HashHelpers.ExpandPrime</code>是一个什么样的方法呢？究竟每次会扩容多少空间呢？我们来看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/HashHelpers.cs"  target="_blank" rel="nofollow">HashHelpers</a>源码。</p> <pre><code class="language-C#">public const uint HashCollisionThreshold = 100;  // 这是比Array.MaxLength小最大的素数 public const int MaxPrimeArrayLength = 0x7FFFFFC3; public const int HashPrime = 101;  public static int ExpandPrime(int oldSize) {     // 新的size等于旧size的两倍     int nwSize = 2 * oldSize;     // 和List一样，如果大于了指定最大值，那么直接返回最大值     if ((uint)newSize &gt; MaxPrimeArrayLength &amp;&amp; MaxPrimeArrayLength &gt; oldSize)     {         Debug.Assert(MaxPrimeArrayLength == GetPrime(MaxPrimeArrayLength), "Invalid MaxPrimeArrayLength");         return MaxPrimeArrayLength;     }     // 获取大于newSize的第一素数     return GetPrime(newSize); }     public static int GetPrime(int min) {     if (min &lt; 0)         throw new ArgumentException(SR.Arg_HTCapacityOverflow);     // 获取大于min的第一个素数     foreach (int prime in s_primes)     {         if (prime &gt;= min)             return prime;     }     // 如果素数列表里面没有 那么计算     for (int i = (min | 1); i &lt; int.MaxValue; i += 2)     {         if (IsPrime(i) &amp;&amp; ((i - 1) % HashPrime != 0))             return i;     }     return min; }  // 用于扩容的素数列表 private static readonly int[] s_primes = {     3, 7, 11, 17, 23, 29, 37, 47, 59, 71, 89, 107, 131, 163, 197, 239, 293, 353, 431, 521, 631, 761, 919,     1103, 1327, 1597, 1931, 2333, 2801, 3371, 4049, 4861, 5839, 7013, 8419, 10103, 12143, 14591,     17519, 21023, 25229, 30293, 36353, 43627, 52361, 62851, 75431, 90523, 108631, 130363, 156437,     187751, 225307, 270371, 324449, 389357, 467237, 560689, 672827, 807403, 968897, 1162687, 1395263,     1674319, 2009191, 2411033, 2893249, 3471899, 4166287, 4999559, 5999471, 7199369 };  // 当容量大于7199369时，需要计算素数 public static bool IsPrime(int candidate) {     if ((candidate &amp; 1) != 0)   {         int limit = (int)Math.Sqrt(candidate);         for (int divisor = 3; divisor &lt;= limit; divisor += 2)         {             if ((candidate % divisor) == 0)                 return false;         }         return true;     }     return candidate == 2; }</code></pre> <p>从上面的代码我们就可以得出<code>HashSet</code>和<code>Dictionary</code>每次扩容后的大小就是大于二倍Size的第一个素数，和List直接扩容2倍还是有差别的。<br /> 至于为什么要使用素数来作为扩容的大小，简单来说是使用素数能让数据在Hash以后更均匀的分布在各个桶中(素数没有其它约数)，这不在本文的讨论范围，具体可以戳<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://stackoverflow.com/questions/1145217/why-should-hash-functions-use-a-prime-number-modulus"  target="_blank" rel="nofollow">链接1</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/"  target="_blank" rel="nofollow">链接2</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://cs.stackexchange.com/questions/11029/why-is-it-best-to-use-a-prime-number-as-a-mod-in-a-hashing-function/64191#64191"  target="_blank" rel="nofollow">链接3</a>了解更多。</p> <h2 id="总结">总结</h2> <p>从性能的角度来说，<strong>强烈建议大家在使用集合类型时指定初始容量</strong>，总结了下面的几个点。</p> <ul> <li>如果你知道集合将要存放的元素个数，那么就直接设置那个大小，那样性能最高. <ul> <li>比如那种分页接口，页大小只可能是50、100</li> <li>或者做Map操作，前后的元素数量是一致的，那就可以直接设置</li> </ul> </li> <li>如果你不知道，那么可以预估一下个数，在2的次方中找一个合适的就可以了. <ul> <li>可以尽量的预估多一点点，能避免Resize操作就避免</li> </ul> </li> </ul> <h2 id="附录">附录</h2> <p>List源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs"  target="_blank" rel="nofollow">https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs</a></p> <p>Stack源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Collections/src/System/Collections/Generic/Stack.cs"  target="_blank" rel="nofollow">https://github.com/dotnet/runtime/blob/main/src/libraries/System.Collections/src/System/Collections/Generic/Stack.cs</a></p> <p>Queue源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Queue.cs"  target="_blank" rel="nofollow">https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Queue.cs</a></p> <p>HashSet源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/HashSet.cs"  target="_blank" rel="nofollow">https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/HashSet.cs</a></p> <p>Dictionary源码：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Dictionary.cs"  target="_blank" rel="nofollow">https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Dictionary.cs</a></p> <p>浅析 C# Dictionary：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/InCerry/p/10325290.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/InCerry/p/10325290.html</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-42840.htm">RequestBody多个参数Map实现以及前端json传参方式</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-39863.htm" title="畜牧兽医成人自考本科（畜牧兽医成人自考本科考什么）">畜牧兽医成人自考本科（畜牧兽医成人自考本科考什么）</a></li>
                        <li class="py-2"><a href="/news/article-40348.htm" title="mysql查看第二页_MySql实现分页查询的SQL">mysql查看第二页_MySql实现分页查询的SQL</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-21-free-high-speed-nodes.htm" title="「11月21日」最高速度21.5M/S，2024年Clash Meta每天更新免费节点订阅链接">「11月21日」最高速度21.5M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-10-free-node-subscribe.htm" title="「12月10日」最高速度20.4M/S，2024年Clash Meta每天更新免费节点订阅链接">「12月10日」最高速度20.4M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21863.htm" title="宠物粮食品牌前十名排名图片及价格（宠物粮种类）">宠物粮食品牌前十名排名图片及价格（宠物粮种类）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-6-node-share.htm" title="「12月6日」最高速度22.5M/S，2024年Clash Meta每天更新免费节点订阅链接">「12月6日」最高速度22.5M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-6-node-share-links.htm" title="「11月6日」最高速度19.3M/S，2024年Clash Meta每天更新免费节点订阅链接">「11月6日」最高速度19.3M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-12-free-high-speed-nodes.htm" title="「12月12日」最高速度19.9M/S，2024年Clash Meta每天更新免费节点订阅链接">「12月12日」最高速度19.9M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-20031.htm" title="MySQL的聚合函数是否忽略NULL">MySQL的聚合函数是否忽略NULL</a></li>
                        <li class="py-2"><a href="/news/article-26945.htm" title="正规免费领养宠物猫app（正规免费领养宠物猫电话）">正规免费领养宠物猫app（正规免费领养宠物猫电话）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <section class="w3l-market-footer">
        <footer class="footer-28">
            <div class="footer-bg-layer">
                <div class="midd-footer-28 align-center py-lg-4 py-3 mt-5">
                    <div class="container">
                        <p class="copy-footer-28 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            Free Clash Meta免费节点分享站 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </footer>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            &#10548;
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //footer-28 block -->
    <!-- jQuery, Bootstrap JS -->
    <script src="/assets/website/js/frontend/freeclashmeta/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashmeta/bootstrap.min.js"></script>
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/freeclashmeta/owl.carousel.js"></script>
    <!-- script for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: true,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: true
                },
                1000: {
                    items: 1,
                    nav: true
                }
            }
        })
    })
    </script>
    <!-- //script for owlcarousel -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script src="/assets/website/js/frontend/freeclashmeta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>