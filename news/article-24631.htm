<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freeclashmeta.github.io/news/article-24631.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>java多线程[5]：信号量(Semaphore)</title>
        <meta name="description" content="Semaphore通过计数器来控制对一个共享资源的访问，它的工作机制是：当一个线程想要访问一个共享资源时，需要向Semaphore申请访问权限，如果Semaphore的计数器大于0，则线程获得共享资源" />
        <link rel="icon" href="/assets/website/img/freeclashmeta/favicon.ico" type="image/x-icon"/>
    <!-- web fonts -->
    <link href="//fonts.googleapis.com/css?family=Roboto:300,400,500,700,900&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css?family=Nunito:200,300,400,600,700,800,900&display=swap" rel="stylesheet">
    <!-- //web fonts -->
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/freeclashmeta/style-starter.css">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XC0F2XP2Y3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XC0F2XP2Y3');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="w3l-bootstrap-header fixed-top">
    <nav class="navbar navbar-expand-lg navbar-light p-2">
        <div class="container">
                        <a class="navbar-brand" href="/">Free Clash Meta</a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav mr-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</div>
    <!-- index-block1 -->
    <div class="w3l-index-block1 list">
        <div class="content py-5">
            <div class="container">
                <div class="row py-md-5 py-3">
                    <div class="col-md-5 content-left">
                        <h1 class="pt-5">java多线程[5]：信号量(Semaphore)</h1>
                        <p class="mt-3 mb-md-5 mb-4">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                    <div class="col-md-7 content-photo mt-md-0 mt-5">
                        <img href="/assets/website/img/freeclashmeta/main.jpg" class="img-fluid" alt="main image">
                    </div>
                </div>
                <div class="clear"></div>
            </div>
        </div>
    </div>
    <!-- //index-block1 -->
    <!-- content-with-photo17 -->
    <section class="w3l-index-block3">
        <div class="section-info py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> <p>Semaphore通过计数器来控制对一个共享资源的访问，它的工作机制是：当一个线程想要访问一个共享资源时，需要向Semaphore申请访问权限，如果Semaphore的计数器大于0，则线程获得共享资源的访问权限，此时Semaphore的计数器减一。当该线程使用完共享资源后，需要释放访问权限，此时Semaphore的计数器加一。如果一个线程在申请访问权限时Semaphore的计数器为0，则当前线程就会自动挂起，直到另一个线程释放一个访问权限后，当前线程获取访问权限并恢复运行。</p> </h1> <p>Semaphore的用法比较简单，下面看一下它的构造方法和常用方法。</p> <h3 id="构造方法">构造方法</h3> <p>Semaphore有两个构造函数，第一个指定了计数器的个数，如果设置为1的话，则只有1个线程可以同时获取到共享资源。第二个重载的第二个参数如果设置为true，则先申请访问权限的线程会保证先得到访问权限。</p> <pre class="prettyprint"><code class="hljs java">Semaphore(<span class="hljs-keyword">int</span> num) Semaphore(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">boolean</span> how)</code></pre> <h3 id="申请权限">申请权限</h3> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">void</span> acquire( ) <span class="hljs-keyword">throws</span> InterruptedException <span class="hljs-keyword">void</span> acquire(<span class="hljs-keyword">int</span> num) <span class="hljs-keyword">throws</span> InterruptedException</code></pre> <p>acquire方法默认申请1个访问权限，也可以通过第二个重载来一次申请多个访问权限。</p> <h3 id="释放权限">释放权限</h3> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">void</span> release( ) <span class="hljs-keyword">void</span> release(<span class="hljs-keyword">int</span> num)</code></pre> <p>同acquire一样，release方法默认释放一个访问权限，也可以通过第二个重载版本来一次释放多个访问权限。</p> </h1> <p>下面来看一个例子，假设有一个全局范围内的数字作为共享资源，有三个线程需要访问这个数字来做一个处理，每次处理的时间比较长，并且并发运行的话可能会影响最终的处理结果，所以要通过Semaphore来阻止并发。下面这个类作为共享资源</p> <pre class="prettyprint"><code class="hljs vala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shared</span> {<!-- --></span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> resources = <span class="hljs-number">0</span>; }</code></pre> <p>下面这个类实现了Runable接口，它表示一个需要访问共享资源的线程</p> <pre class="prettyprint"><code class="hljs axapta"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-inheritance"><span class="hljs-keyword">implements</span></span> <span class="hljs-title">Runnable</span> {<!-- --></span>      String name;     Semaphore semaphore;      <span class="hljs-keyword">public</span> MyThread(String name, Semaphore semaphore) {         <span class="hljs-keyword">this</span>.name = name;         <span class="hljs-keyword">this</span>.semaphore = semaphore;         <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>).start();     }      @Override     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run() {         System.out.println(name + <span class="hljs-string">" want a permit"</span>);         <span class="hljs-keyword">try</span> {             semaphore.acquire();         } <span class="hljs-keyword">catch</span> (InterruptedException e) {             e.printStackTrace();         }         System.out.println(name + <span class="hljs-string">" get a permit"</span>);         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {             Shared.resources++;             System.out.println(<span class="hljs-string">"shared resources now is "</span> + Shared.resources + <span class="hljs-string">", by "</span> + name);             <span class="hljs-keyword">try</span> {                 Thread.sleep(<span class="hljs-number">500</span>);             } <span class="hljs-keyword">catch</span> (InterruptedException e) {                 e.printStackTrace();             }         }         System.out.println(name + <span class="hljs-string">"release a permit"</span>);         semaphore.release();     } }</code></pre> <p>这个线程先通过<code>semaphore.acquire()</code>获取到访问权限，然后长时间占有共享资源，最终通过<code>semaphore.release();</code>释放访问权限。</p> <p>下面是main方法</p> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(String[] args) {     Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);     <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"thread a"</span>, semaphore);     <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"thread b"</span>, semaphore);     <span class="hljs-keyword">new</span> MyThread(<span class="hljs-string">"thread c"</span>, semaphore);  }</code></pre> <p>它首先创建了一个计数器为1的Semaphore，然后实例化了三个MyThread对象，该对象实例化后会自动运行线程。从输出结果可以看出，Semaphore有效地阻止了访问公共资源的代码的并发。下面是代码的输出</p> <pre class="prettyprint"><code class="hljs vbnet">thread b want a permit thread a want a permit thread c want a permit thread b <span class="hljs-keyword">get</span> a permit <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">2</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">3</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">4</span>, <span class="hljs-keyword">by</span> thread b <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">5</span>, <span class="hljs-keyword">by</span> thread b thread b release a permit thread a <span class="hljs-keyword">get</span> a permit <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">6</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">7</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">8</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">9</span>, <span class="hljs-keyword">by</span> thread a <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">10</span>, <span class="hljs-keyword">by</span> thread a thread a release a permit thread c <span class="hljs-keyword">get</span> a permit <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">11</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">12</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">13</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">14</span>, <span class="hljs-keyword">by</span> thread c <span class="hljs-keyword">shared</span> resources now <span class="hljs-keyword">is</span> <span class="hljs-number">15</span>, <span class="hljs-keyword">by</span> thread c thread c release a permit</code></pre> </h1> <p>除了并发控制以外，Semaphore还可以用来做线程间的通信。以生产者和消费者为例，假设生产者持有消费者的一个访问权限，导致消费者无法进行消费，当生产者完成生产后，释放这个访问权限，消费者就可以消费了，同时，消费者还可以持有一个生产者的访问权限，在消费完之后再释放，从而通知生产者继续生产。这有点类似wait和notify。下面来看如何通过Semaphore来实现这个场景。</p> <p>首先来看一个队列</p> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Queue {     <span class="hljs-keyword">private</span> Semaphore semaphoreConsumer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">0</span>);     <span class="hljs-keyword">private</span> Semaphore semaphoreProducer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);     <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>;     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>) throws InterruptedException {         semaphoreProducer.acquire();         <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"----------  value is put "</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span>);         semaphoreConsumer.release();     }      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span>() throws InterruptedException {         semaphoreConsumer.acquire();         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"**********  value is get "</span> + <span class="hljs-keyword">value</span>);         semaphoreProducer.release();     } }</code></pre> <p>这个类中包含两个Semaphore对象，一个用于控制生产者的生产，另一个用于控制消费者的消费，用于控制消费的Semaphore默认的计数器是0，表示消费者默认是不能消费的，只有等生产者release一个访问权限后，计数器会加一，此时消费者才可以拿到访问权限并开始消费。下面是生产者和消费者，他们内部只管不停地生产或消费即可</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> {<!-- --></span>     Queue queue;     <span class="hljs-keyword">public</span> <span class="hljs-title">Producer</span>(Queue queue) {         <span class="hljs-keyword">this</span>.queue = queue;         <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>).start();     }      <span class="hljs-annotation">@Override</span>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>() {         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) {             <span class="hljs-keyword">try</span> {                 queue.put(i + <span class="hljs-number">1</span>);             } <span class="hljs-keyword">catch</span> (InterruptedException e) {                 e.printStackTrace();             }         }     } }</code></pre> <pre class="prettyprint"><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Queue {     <span class="hljs-keyword">private</span> Semaphore semaphoreConsumer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">0</span>);     <span class="hljs-keyword">private</span> Semaphore semaphoreProducer = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);     <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>;     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span>(<span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>) throws InterruptedException {         semaphoreProducer.acquire();         <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span> = <span class="hljs-keyword">value</span>;         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"----------  value is put "</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">value</span>);         semaphoreConsumer.release();     }      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span>() throws InterruptedException {         semaphoreConsumer.acquire();         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"**********  value is get "</span> + <span class="hljs-keyword">value</span>);         semaphoreProducer.release();     } }</code></pre> <p>下面是main方法</p> <pre class="prettyprint"><code class="hljs cpp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) {     Queue <span class="hljs-built_in">queue</span> = <span class="hljs-keyword">new</span> Queue();     <span class="hljs-keyword">new</span> Consumer(<span class="hljs-built_in">queue</span>);     <span class="hljs-keyword">new</span> Producer(<span class="hljs-built_in">queue</span>); }</code></pre> <p>下面是代码的输出</p> <pre class="prettyprint"><code class="hljs cs">----------  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> put <span class="hljs-number">1</span> **********  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">get</span> <span class="hljs-number">1</span> ----------  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> put <span class="hljs-number">2</span> **********  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">get</span> <span class="hljs-number">2</span> ----------  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> put <span class="hljs-number">3</span> **********  <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">get</span> <span class="hljs-number">3</span> ......</code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24167.htm">高乐蜜芒果怎么样是熟了(高乐蜜芒果熟到什么程度能吃)</a></p>
                                        <p>下一个：<a href="/news/article-24632.htm">家养的布偶猫值得买吗（家养布偶猫价格多少钱一只）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-8-16-node-share.htm" title="「8月16日」最高速度18.6M/S，2024年Clash Meta每天更新免费节点订阅链接">「8月16日」最高速度18.6M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-14-free-node-subscribe.htm" title="「10月14日」最高速度20.2M/S，2024年Clash Meta每天更新免费节点订阅链接">「10月14日」最高速度20.2M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-node-share-links.htm" title="「11月5日」最高速度21M/S，2024年Clash Meta每天更新免费节点订阅链接">「11月5日」最高速度21M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-22321.htm" title="猫知道自己换主人了吗（猫跟人睡在一起吸阳气）">猫知道自己换主人了吗（猫跟人睡在一起吸阳气）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-24-free-node-subscribe.htm" title="「10月24日」最高速度22.5M/S，2024年Clash Meta每天更新免费节点订阅链接">「10月24日」最高速度22.5M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21400.htm" title="兽用疫苗如何保存最好的方法（兽药疫苗冷藏保存）">兽用疫苗如何保存最好的方法（兽药疫苗冷藏保存）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-9-node-share.htm" title="「8月9日」最高速度22.7M/S，2024年Clash Meta每天更新免费节点订阅链接">「8月9日」最高速度22.7M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-18-free-high-speed-nodes.htm" title="「12月18日」最高速度19.5M/S，2024年Clash Meta每天更新免费节点订阅链接">「12月18日」最高速度19.5M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-node-share.htm" title="「11月30日」最高速度19.6M/S，2024年Clash Meta每天更新免费节点订阅链接">「11月30日」最高速度19.6M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-2-free-node-subscribe-links.htm" title="「8月2日」最高速度21.4M/S，2024年Clash Meta每天更新免费节点订阅链接">「8月2日」最高速度21.4M/S，2024年Clash Meta每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <section class="w3l-market-footer">
        <footer class="footer-28">
            <div class="footer-bg-layer">
                <div class="midd-footer-28 align-center py-lg-4 py-3 mt-5">
                    <div class="container">
                        <p class="copy-footer-28 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            Free Clash Meta免费节点分享站 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </footer>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            &#10548;
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //footer-28 block -->
    <!-- jQuery, Bootstrap JS -->
    <script src="/assets/website/js/frontend/freeclashmeta/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashmeta/bootstrap.min.js"></script>
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/freeclashmeta/owl.carousel.js"></script>
    <!-- script for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: true,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: true
                },
                1000: {
                    items: 1,
                    nav: true
                }
            }
        })
    })
    </script>
    <!-- //script for owlcarousel -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script src="/assets/website/js/frontend/freeclashmeta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>